---
layout: documentation
title: Querying
---

* "Finders":#finders
** "find":#find
** "all":#all
** "last":#last
** "first":#first
** "find_each":#find_each
** "paginate":#paginate
* "Criteria":#criteria
** "where":#where
** "fields":#fields
** "count":#count
** "sort, order":#sort
** "limit":#limit
** "skip, offset":#skip
* "Operators":#operators

h2(#finders). Finders

h3. find

Find a document by ID, or by certain criteria.

{% highlight ruby %}
Patient.find('4da32870c198a73ca3000001')
{% endhighlight %}

{% highlight ruby %}
@patients = Patient.find(:last_name => 'Smith', :order => :first_name)
{% endhighlight %}

See "Criteria":#criteria for the preferred way of selecting certain documents.

h3(#all). all

Get all of the documents in a query as an array.

{% highlight ruby %}
Patient.where(:last_name => "Johnson").order(:last_name).all.each do |patient|
  puts patient.last_name
end
{% endhighlight %}

h3(#first). first

Get the first document in a query. Naturally, this makes the most sense when you have also provided a means of "sorting":#sort.

{% highlight ruby %}
Patient.sort(:created_at.desc).first
{% endhighlight %}

h3(#last). last

Get the last document in a query. Naturally, this makes the most sense when you have also provided a means of "sorting":#sort.

{% highlight ruby %}
Patient.sort(:created_at).last
{% endhighlight %}

h3. paginate

Paginate the query.

{% highlight ruby %}
patients = Patient.sort(:created_at).paginate(:per_page => 25, :page => 3)
{% endhighlight %}

h2(#criteria). Criteria

Mongo has rich support for "dynamic queries":http://www.mongodb.org/display/DOCS/Querying. MongoMapper uses ["Plucky":https://github.com/jnunemaker/plucky] to construct query proxy objects that only retrieve data from Mongo when needed.  This allows a query to be composed of several conditions before being evaluated.

h3(#where). where

Use @where@ to specify your query criteria.

{% highlight ruby %}
patients = Patient.where(:first_name => "John", :last_name => "Johnson")
{% endhighlight %}

h3(#fields). fields

Sometimes you know you are loading objects for a very specific purpose–maybe to show a few fields on the UI. You can limit the number of fields returned with data filled in as follows:

{% highlight ruby %}
query = Patient.where(:last_name => "Johnson").
        fields(:last_name, :gender).all
#=> [#<Patient created_at: nil, updated_at: nil, _id: BSON::ObjectId('4d140b878951a202ae000002'), gender: "M", last_name: "Johnson", first_name: nil>]
{% endhighlight %}

*Note that all the other attributes in your model will be nil (or set to their default value)*. Therefore, if you call a method that makes use of all the attributes–like @to_json@–then keep in mind that the values will be nil, and you will need to emit only those fields:

{% highlight ruby %}
query.to_json(:only => [:last_name, :gender])
#=> "[{\"last_name\":\"Johnson\",\"gender\":\"M\"}]"
{% endhighlight %}

h3(#count). count

Instead of returning an array of complete documents, you may want to merely check to see how many exist.

{% highlight ruby %}
patients = Patient.where( :last_name.gte => 'A', :last_name.lt => 'B' ).count
#=> 1803
{% endhighlight %}

h3(#sort). sort, order

You can choose to sort the documents by various keys, ascending (default) or descending.

{% highlight ruby %}
Patient.sort(:last_name)

Patient.where(:updated_at.gte => 3.days.ago).sort(:updated_at.desc)
{% endhighlight %}

h3(#limit). limit

You can limit the number of documents returned by the query.

{% highlight ruby %}
patients = Patient.sort(:last_name).limit(10)
{% endhighlight %}

h3(#skip). skip, offset

Skip is used to return a list of documents beyond the number that are requested to be skipped.

{% highlight ruby %}
patients = Patient.sort(:last_name).limit(10).skip(10)
{% endhighlight %}

h3(#operators). Operators

Mongo supports quite a few "conditional operators":http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators. You can use these directly in your MongoMapper queries.

{% highlight ruby %}
User.where(:age => {:$gt => 21, :$lt => 30})
{% endhighlight %}

MongoMapper also provides shorthand for most of these operators.

{% highlight ruby %}
User.where(:age.gt => 21)
{% endhighlight %}

See MongoDB's "documentation on conditional operators":http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators.

h2. Related Resources

"MongoDB Querying Documentation":http://www.mongodb.org/display/DOCS/Querying